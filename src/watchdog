#!/usr/bin/env ruby

# frozen_string_literal: true

require 'fileutils'
require 'yaml'

# rubocop:disable all
# Monkey patch so that +X behaves correctly, i.e., execute/search permission is
# affected only if the file is a directory or already had execute permission.
module FileUtils
 def symbolic_modes_to_i(mode_sym, path)  #:nodoc:
    mode = if File::Stat === path
             path.mode
           else
             File.stat(path).mode
           end
    mode_sym.split(/,/).inject(mode & 07777) do |current_mode, clause|
      target, *actions = clause.split(/([=+-])/)
      raise ArgumentError, "invalid file mode: #{mode_sym}" if actions.empty?
      target = 'a' if target.empty?
      user_mask = user_mask(target)
      actions.each_slice(2) do |op, perm|
        need_apply = op == '='
        mode_mask = (perm || '').each_char.inject(0) do |mask, chr|
          case chr
          when "r"
            mask | 0444
          when "w"
            mask | 0222
          when "x"
            mask | 0111
          when "X"
            if FileTest.directory?(path) || (current_mode & 00111) > 0
              mask | 0111
            else
              mask
            end
          when "s"
            mask | 06000
          when "t"
            mask | 01000
          when "u", "g", "o"
            if mask.nonzero?
              current_mode = apply_mask(current_mode, user_mask, op, mask)
            end
            need_apply = false
            copy_mask = user_mask(chr)
            (current_mode & copy_mask) / (copy_mask & 0111) * (user_mask & 0111)
          else
            raise ArgumentError, "invalid `perm' symbol in file mode: #{chr}"
          end
        end

        if mode_mask.nonzero? || need_apply
          current_mode = apply_mask(current_mode, user_mask, op, mode_mask)
        end
      end
      current_mode
    end
  end
  private_module_function :symbolic_modes_to_i
end
# rubocop:enable all

# ...
def now
  @now ||= Time.now
end

# Policy class
class Policy
  include Comparable

  attr_reader :time

  def initialize(time, mode)
    @time = time
    case mode
    when Hash
      @dir      = mode['dir']
      @file     = mode['file']
      @group    = mode['group']
      @excludes = mode['excludes']
      @includes = mode['includes']
    when String
      @dir  = mode
      @file = mode
    end
  end

  def <=>(other)
    time <=> other.time
  end

  def valid?
    (time - now.gmt_offset) <= now
  end

  def mode(fullpath)
    File.directory?(fullpath) ? dir : file
  end

  private

  attr_reader :dir
  attr_reader :file
end

# Path class
class Path
  def initialize(config, fullpath = '', parent = nil)
    # record arguments
    %i[config fullpath parent].each do |s|
      instance_variable_set("@#{s}", binding.local_variable_get(s))
    end

    # populate instance variables in specific order
    %i[group excludes includes policy path].each do |s|
      instance_variable_set("@#{s}", send(s))
    end
  end

  def apply
    (path + children).each(&:apply)

    return if fullpath.empty?

    FileUtils.chmod(mode, fullpath, verbose: true)

    return if group.empty?

    FileUtils.chown(nil, group, fullpath, verbose: true)
  end

  protected

  attr_reader :fullpath

  def mode
    p = policy.max
    p = policy.min if excluded? || !p.valid?
    p.mode(fullpath)
  end

  def group
    return @group unless @group.nil?

    @group = @config.delete('group') || @parent&.group || ''
  end

  def dir_children(fullpath)
    Dir.exist?(fullpath) ? Dir.children(fullpath) : []
  end

  def children
    return @children unless @children.nil?

    @children = dir_children(fullpath).map do |c|
      cpath = File.join(fullpath, c)
      Path.new(@config, cpath, self) unless path?(cpath)
    end.compact
  end

  def path?(fullpath)
    path.any? { |p| p.fullpath.eql?(fullpath) }
  end

  def path
    return @path unless @path.nil?

    @path = @config.map do |k, v|
      Path.new(v, File.join(fullpath, k), self) if k.is_a?(String)
    end.compact
  end

  def policy
    return @policy unless @policy.nil?

    @policy = if @config['mode']
                [Policy.new(Time.at(0), @config.delete('mode'))]
              else
                @parent&.policy.clone || []
              end

    @policy.concat(@config.map do |k, v|
      Policy.new(k, v) if k.is_a?(Time)
    end.compact)
  end

  def excludes
    return @excludes unless @excludes.nil?

    @excludes = @parent&.excludes.clone || []

    @excludes.concat(@config.delete('exclude')&.map do |e|
      Dir.glob(File.join(fullpath, e))
    end&.flatten || [])
  end

  def includes
    return @includes unless @includes.nil?

    @includes = @parent&.includes.clone || []

    @includes.concat(@config.delete('include')&.map do |i|
      Dir.glob(File.join(fullpath, i))
    end&.flatten || [])
  end

  private

  def excluded?
    excludes.include?(fullpath) && !included?
  end

  def included?
    includes.include?(fullpath)
  end
end

# Start processing
begin
  Path.new(YAML.load_file(ARGV[0] + '/_watchdog.yml')).apply
rescue ArgumentError => e
  puts e.message
rescue Errno::ENOENT => e
  puts e.message
end
